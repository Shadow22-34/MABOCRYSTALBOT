print("üíé Loading AC Bypass...")

local function loadACBypass(url)
    local success, err = pcall(function()
        loadstring(game:HttpGet(url, true))()
    end)
    if success then
        print("‚úÖ AC Bypass part loaded: " .. url)
    else
        print("‚ùå Failed to load AC Bypass part: " .. url .. " - Error: " .. err)
    end
    return success
end

local acScripts = {
    "https://raw.githubusercontent.com/shakar60/scripts/refs/heads/main/ac%20bypass",
    "https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua",
    "https://raw.githubusercontent.com/RelkzzRebranded/Bypassed---OBFUSCATED..../main/Adonis%20BYPASS.lua"
}

for _, url in ipairs(acScripts) do
    if not loadACBypass(url) then
        print("‚ùå AC Bypass failed, stopping further execution.")
        return
    end
    task.wait(2)
end

print("‚úÖ AC Bypass Loaded")

local plr = game:GetService("Players").LocalPlayer
local cclosure = syn_newcclosure or newcclosure or nil

if not cclosure or not hookmetamethod then
    plr:Kick("\n\nYour exploit doesn't support hookmetamethod\n")
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", cclosure(function(self, ...)
    local NamecallMethod = getnamecallmethod()
    local args = { ... }
    if (NamecallMethod == "Kick" or NamecallMethod == "kick") and not checkcaller() then
        if self ~= plr then
            return oldNamecall(self, ...)
        end
        return
    end
    return oldNamecall(self, ...)
end))

for wendigo, iscool in pairs(getgc(true)) do
    if pcall(function() return rawget(iscool, "indexInstance") end) 
    and type(rawget(iscool, "indexInstance")) == "table" 
    and rawget(iscool, "indexInstance")[1] == "kick" then
        iscool.tvk = {"kick", function() 
            return game.Workspace:WaitForChild("") 
        end}
    end
end

local getinfo = getinfo or debug.getinfo
local DEBUG = false
local Hooked = {}

local Detected, Kill

setthreadidentity(2)

for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")

        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc

            local Old; Old = hookfunction(Detected, function(Action, Info, NoCrash)
                if Action ~= "_" then
                    if DEBUG then
                        warn("Adonis AntiCheat flagged\nMethod: {Action}\nInfo: {Info}")
                    end
                end
                return true
            end)

            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc
            local Old; Old = hookfunction(Kill, function(Info)
                if DEBUG then
                    warn("Adonis AntiCheat tried to kill (fallback): {Info}")
                end
            end)

            table.insert(Hooked, Kill)
        end
    end
end

local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...

    if Detected and LevelOrFunc == Detected then
        if DEBUG then
            warn("Adonis AntiCheat sanity check detected and broken")
        end
        return coroutine.yield(coroutine.running())
    end

    return Old(...)
end))

Bypass = true

local GameMT = getrawmetatable(game)
local OldIndexFunc = GameMT.__index
local OldNamecallFunc = GameMT.__namecall
setreadonly(GameMT, false)
if (Bypass == true) then
    GameMT.__namecall = newcclosure(function(self, ...) 
        local NamecallArgs = {...}

        local DETECTION_STRINGS = 
        {
            'CHECKER_1',
            'CHECKER',
            'OneMoreTime',
            'checkingSPEED',
            'PERMAIDBAN',
            'BANREMOTE',
            'FORCEFIELD',
            'TeleportDetect',
        }

        if (table.find(DETECTION_STRINGS, NamecallArgs[1]) and getnamecallmethod() == 'FireServer') then 
            return
        end
        local suc, err = pcall(getfenv, 2)
        if not (err) then 
            if getfenv(2).crash then 
                hookfunction(getfenv(2).crash, function() 
                    
                end)
            end
        end
        return OldNamecallFunc(self, ...)
    end)
end

for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
    task.wait()
    con:Disable()
end
for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
    task.wait()
    con:Disable()
end

print("üíé Loading Crystal Hub...")
local success, err = pcall(function()
    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
    
    -- Add debug print statements
    print("Debug: Game loaded successfully")
    
    setthreadidentity(7)
    
    print("Debug: Attempting to load UI library...")
    local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt"))()
    if not lib then
        warn("Debug: UI library returned nil")
        error("Failed to load UI library")
    end
    print("Debug: UI library loaded successfully")
    
    -- Add delay to ensure UI library is fully loaded
    task.wait(0.5)
    
    print("Debug: Creating window...")
    local win = lib:Window("Crystal Scripts", Color3.fromRGB(255, 134, 236), Enum.KeyCode.RightControl)
    if not win then
        warn("Debug: Window creation returned nil")
        error("Failed to create window")
    end
    print("Debug: Window created successfully")

    setthreadidentity(2)
    
    -- Add error handling for tab creation
    local function createTab(name)
        local success, tab = pcall(function()
            return win:Tab(name)
        end)
        if not success or not tab then
            warn("Debug: Failed to create tab:", name)
            error("Failed to create tab: " .. name)
        end
        print("Debug: Created tab:", name)
        return tab
    end
    
    local Main = createTab("Main")
    local KeyBinds = createTab("KeyBinds")

    Main:Toggle("Green Been (Press Q to activate)", false, function(t)
        local UserInputService = game:GetService("UserInputService")
        local VirtualInputManager = game:GetService("VirtualInputManager")
        local shooting = false

        local function holdE()
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        end

        local function releaseE()
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        end

        local function doAutoGreen()
            if not shooting then
                shooting = true
                holdE()
                task.wait(0.332)
                releaseE()
                task.wait(0.2)
                shooting = false
            end
        end

        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode.Q then
                doAutoGreen()
            end
        end)
    end)

    Main:Toggle("Auto Guard", false, function(t)
        local UserInputService = game:GetService("UserInputService")
        local VirtualInputManager = game:GetService("VirtualInputManager")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local guarding = false
        
        local function hasBasketball(player)
            if typeof(player) == "Instance" and player:IsA("Model") then
                return player:FindFirstChild("Basketball") ~= nil
            end
            return false
        end
        
        local function getNearestPlayerWithBall()
            local nearestPlayer = nil
            local shortestDistance = 14
            
            for _, model in pairs(workspace:GetChildren()) do
                if model:IsA("Model") and hasBasketball(model) and model.Name ~= LocalPlayer.Name then
                    local distance = (model:GetPivot().Position - LocalPlayer.Character:GetPivot().Position).Magnitude
                    if distance <= shortestDistance then
                        shortestDistance = distance
                        nearestPlayer = model
                    end
                end
            end
            
            return nearestPlayer
        end
        
        local function moveTowardsTarget(target)
            if not target or not LocalPlayer.Character or not LocalPlayer.Character.HumanoidRootPart then return end
            
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if not humanoid then return end
            
            local targetPos = target:GetPivot().Position
            local characterPos = LocalPlayer.Character:GetPivot().Position
            
            -- Camera lock logic
            local camera = workspace.CurrentCamera
            if target:FindFirstChild("HumanoidRootPart") then
                local targetCFrame = CFrame.new(camera.CFrame.Position, target.HumanoidRootPart.Position)
                camera.CFrame = camera.CFrame:Lerp(targetCFrame, 0.2)
            end
            
            -- Find the basket the opponent is closest to
            local closestBasket = nil
            local closestDistance = math.huge
            for _, basket in pairs(workspace:GetChildren()) do
                if basket.Name == "Basket" then
                    local distance = (basket:GetPivot().Position - targetPos).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestBasket = basket
                    end
                end
            end
            
            if closestBasket then
                -- Calculate direction from opponent to basket
                local basketDirection = (closestBasket:GetPivot().Position - targetPos).Unit
                
                -- Position ourselves between opponent and basket
                local optimalDistance = 3 -- Closer distance to prevent layups
                local guardPosition = targetPos + (basketDirection * optimalDistance)
                
                -- Move to guarding position
                humanoid:MoveTo(guardPosition)
                
                -- Always face the opponent
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.lookAt(
                    LocalPlayer.Character.HumanoidRootPart.Position,
                    targetPos
                )
                
                -- Movement key handling
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
                
                -- Calculate distance to guard position
                local distanceToGuardPos = (guardPosition - characterPos).Magnitude
                
                -- More aggressive movement when not in position
                if distanceToGuardPos > 0.5 then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.W, false, game)
                    
                    -- Add lateral movement to better cut off paths to basket
                    local lateralOffset = (targetPos - characterPos):Cross(Vector3.new(0, 1, 0)).Unit
                    if (guardPosition - characterPos):Dot(lateralOffset) > 0 then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.D, false, game)
                    else
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.A, false, game)
                    end
                end
            end
        end

        local guardingConnection
        if t then
            if hasBasketball(LocalPlayer.Character) then
                return
            end
            
            guardingConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if guarding then
                    local target = getNearestPlayerWithBall()
                    if target then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                        moveTowardsTarget(target)
                    else
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
                    end
                end
            end)
            
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
                    guarding = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
                    guarding = false
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
                end
            end)
        else
            if guardingConnection then
                guardingConnection:Disconnect()
            end
            guarding = false
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
        end
    end)

    Main:Toggle("Auto Block", false, function(t)
        print(t)
    end)

    Main:Toggle("Perfect Spot Predictor", false, function(t)
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local RunService = game:GetService("RunService")
        
        local function createHighlight()
            local highlight = Instance.new("Highlight")
            highlight.Name = "ShootingIndicator"
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0.3
            return highlight
        end
        
        local function getHighlight()
            if LocalPlayer.Character then
                local highlight = LocalPlayer.Character:FindFirstChild("ShootingIndicator")
                if not highlight then
                    highlight = createHighlight()
                    highlight.Parent = LocalPlayer.Character
                end
                return highlight
            end
        end
        
        local function isGuarded()
            if not LocalPlayer.Character then return false end
            
            if not LocalPlayer.Character:FindFirstChild("Basketball") then
                return false
            end
            
            local myPos = LocalPlayer.Character:GetPivot().Position
            local guardDistance = 14
            
            for _, model in pairs(workspace:GetChildren()) do
                if model:IsA("Model") and model ~= LocalPlayer.Character then
                    local distance = (model:GetPivot().Position - myPos).Magnitude
                    if distance <= guardDistance then
                        return true
                    end
                end
            end
            
            return false
        end
        
        local connection
        if t then
            connection = RunService.Heartbeat:Connect(function()
                local highlight = getHighlight()
                if highlight then
                    if isGuarded() then
                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                    else
                        highlight.FillColor = Color3.fromRGB(0, 255, 0)
                        highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
                    end
                end
            end)
        else
            if connection then
                connection:Disconnect()
            end
            
            if LocalPlayer.Character then
                local highlight = LocalPlayer.Character:FindFirstChild("ShootingIndicator")
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end)

    Main:bind("Green Been", Enum.KeyCode.N, function()
        print("Pressed!")
    end)

    Main:bind("Auto Guard", Enum.KeyCode.V, function()
        print("Pressed!")
    end)

    Main:bind("Auto Block", Enum.KeyCode.B, function()
        print("Pressed!")
    end)
end)

if success then
    print("‚úÖ Crystal Hub Loaded Successfully. Enjoy! üíé")
else
    print("‚ùå Failed to load Crystal Hub: " .. err)
end